# Projetos
Meus projetos de Data Analytics


# Projeto - Sistema para acompanhar as devoluções na granularidade de ticket

query = '''
SELECT
  rr.coluna_produto,
  rr.coluna_ticketID,
  rr.data_de_envio,
  rr.data_report,
  rr.descrição_produto,
  rr.coluna_fornecedor,
  rr.coluna_categoria,
  rr.coluna_fonte_venda,
  rr.resposta_cliente, 
  ps.coluna_beneficiamento,
  CASE
    WHEN rr.motivo_devolução IN ('Defeito técnico', 'Insatisfação', 'Produto incompleto', 'Produto Danificado', 'Produto errado enviado')
    THEN 'Motivo de qualidade'
    ELSE 'Sem motivo de qualidade'
  END AS qualidade_flag,
  rr.motivo_devolução,
  rr.motivo_detalhado,
  rr.total_retornado,
  rr.total_vendido
FROM
  base1 rr
  LEFT JOIN base2 ps on rr.FK_coluna_produto = ps.PK_coluna_produto
WHERE
  rr.data_de_envio >= '2023'
  AND ps.coluna_produto_importadoornacional = 'Nacional'
  AND ps.beneficiamento = 'no'
'''
df1 = spark.sql(query)

df1 = df1.withColumn("data_report", F.to_date(F.col("data_report"), "yyyy/MM"))
df1 = df1.withColumn("dif_data_mes",
                    F.when(F.months_between(F.col('data_report'), F.col('data_de_envio')) < 0, 0)
                     .otherwise(F.round(F.months_between(F.col('data_report'), F.col('data_de_envio')))))
df1 = df1.withColumn('mes_de_envio', F.date_trunc('mm', F.col('data_de_envio')))


df_produto_vendido = df1.groupby('mes_de_envio', 'coluna_produto').agg(
    F.sum('total_vendido').alias('soma_total_vendido'))

df_produto_retornado = df1.groupby('mes_de_envio', 'coluna_produto', 'data_report', 'coluna_ticketID', 'dif_data_mes').agg(
    F.sum('total_retornado').alias('soma_total_retornado'))

## Trazendo o Safrado No nível SKU

df_safrado = df_produto_retornado.join(df_produto_vendido, ['mes_de_envio', 'coluna_produto'], how = 'left')
df_safrado = df_safrado.withColumn('Safrado_produto', F.col('soma_total_retornado') / F.col('soma_total_vendido'))

## Trazendo o Safrado no Nível de Fornecedores

df_gross_fornecedor = df1.groupby('mes_de_envio','fornecedor').agg(F.sum('total_vendido').alias('total_vendido_fornecedor'))

df_gross_produto = df1.groupby('mes_de_envio', 'coluna_produto', 'coluna_fornecedor').agg(
    F.sum('total_vendido').alias('total_vendido_produto'))

## Calcular o Share de cada fornecedor

df_share = df_gross_produto.join(df_gross_fornecedor, ['mes_de_envio', 'coluna_fornecedor'])
df_share = df_share.withColumn('share_produto', F.col('total_vendido_produto') / F.col('total_vendido_fornecedor'))
df_share = df_share.drop('total_vendido_produto', 'total_vendido_fornecedor')

